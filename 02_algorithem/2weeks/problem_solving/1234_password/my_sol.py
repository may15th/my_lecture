# import sys
# sys.stdin = open('input.txt')
'''
※ SW Expert 아카데미의 문제를 무단 복제하는 것을 금지합니다.
평소에 잔머리가 발달하고 게으른 철수는 비밀번호를 기억하는 것이 너무 귀찮았습니다.
적어서 가지고 다니고 싶지만 누가 볼까봐 걱정입니다. 한가지 생각을 해냅니다.
0~9로 이루어진 번호 문자열에서 같은 번호로 붙어있는 쌍들을 소거하고 남은 번호를 비밀번호로 만드는 것입니다.
번호 쌍이 소거되고 소거된 번호 쌍의 좌우 번호가 같은 번호이면 또 소거 할 수 있습니다.
예를 들어 아래의 번호 열을 철수의 방법으로 소거하고 알아낸 비밀 번호입니다.

[입력]
10개의 테스트 케이스가 10줄에 걸쳐, 한 줄에 테스트 케이스 하나씩 제공된다.
각 테스트 케이스는 우선 문자열이 포함하는 문자의 총 수가 주어지고, 공백을 둔 다음 번호 문자열이 공백 없이 제공된다.
문자열은 0~9로 구성되며 문자열의 길이 N은 10≤N≤100이다. 비밀번호의 길이는 문자열의 길이보다 작다.

'''
import sys
sys.stdin = open('input.txt')


T = 10
for tc in range(1, T+1):
    str_N, str_num = input().split()    #map(str, input().split()) 이런식으로만 가능한 줄 알았는데...
    N = int(str_N)
    stack = [0] * N
    top = -1


    for t in str_num:
        # 스택 푸쉬 먼저
        # 스택이 비어있거나 스택 최상단 값이 str_num의 값과 다르다면
        if top == -1 or stack[top] != t:
            top += 1
            stack[top] = t
        # 스택 팝... 이라기보다는 top-1로 옮겨서 비교하게 하는것.
        else:           #스택
            top -= 1

    ans = ''.join(stack[:top+1]) # 조인 메서드 사용법. ''.join(리스트) 하면 리스트 요소들이 자동으로 붙게 됨.
    print(f'# {tc} {ans}') #1을 # 1로 바꾸고 싶으면 그냥 #{tc} # {tc] 이 차이일뿐. 그냥 띄워주면 됨.
    print(stack)            #다만 스택에 0다음에 9가 포함되는 이유를 모르겠다...


    #스택에 있는 값들 .join 메서드로 출력하기


    # [출력]
    # 부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스에 대한 답(비밀번호)을 출력한다.

    # 1 1234
    # 2 4123
    # 3 123123
    # 4 1234123123
    # 5 12341
    # 6 123535
    # 7 123432141
    # 8 231231321
    # 9 12312323
    # 10 9823