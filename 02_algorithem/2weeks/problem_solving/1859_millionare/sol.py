# 둘재 줄 각 날의 매매가 공백으로
'''
25년 간의 수행 끝에 원재는 미래를 보는 능력을 갖게 되었다. 이 능력으로 원재는 사재기를 하려고 한다.
다만 당국의 감시가 심해 한 번에 많은 양을 사재기 할 수 없다.
다음과 같은 조건 하에서 사재기를 하여 최대한의 이득을 얻도록 도와주자.
    1. 원재는 연속된 N일 동안의 물건의 매매가를 예측하여 알고 있다.
    2. 당국의 감시망에 걸리지 않기 위해 하루에 최대 1만큼 구입할 수 있다.
    3. 판매는 얼마든지 할 수 있다.
예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.


[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
각 테스트 케이스 별로 첫 줄에는 자연수 N(2 ≤ N ≤ 1,000,000)이 주어지고,
둘째 줄에는 각 날의 매매가를 나타내는 N개의 자연수들이 공백으로 구분되어 순서대로 주어진다.
각 날의 매매가는 10,000이하이다.

[출력]
각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고, 최대 이익을 출력한다.


[예제 풀이]
1번째 케이스는 아무 것도 사지 않는 것이 최대 이익이다.
2번째 케이스는 1,2일에 각각 한 개씩 사서 세 번째 날에 두 개를 팔면 10의 이익을 얻을 수 있다.

'''
import sys
sys.stdin = open('input.txt')

T = int(input())
for tc in range(1, T+1):
    N = int(input())
    values = list(map(int, input().split()))
    max_v = 0
    ans = 0

    for i in range(1, N):# range로 i는 1부터 n까지
        max_v = values[N-1]
        if max_v <= values[N-1-i]:
            ans += 0
            max_v = values[N-1-i]
        else:
            ans += (max_v - values[N-1-i])


    print(f'#{tc} {ans}')










# ans = 0
# 모든 날 i
#     i+1 ~ N일 사이
#         최댓값 imax_v찾기
#     if price[i] < imax_v찾기
#         ans += imax_ v -price[i]
#             i날 구입한 이익
#     ans = 0
#     for i : 0-> N -2
#         imax_v = price[i+1]
#         for j: i+2 -> N-1
#             if

# 첫 단계는 모든 날 중 i날에서 그 다음날 부터 마지막 날에서 최댓값날
# 찾고 빼야 한다. 근데 이렇게 하면 시간초과 뜰 확률 높음.
# N = 100만 까지 주어짐. 1~100만까지 합 연산 필요해 . (1+백만)(백만)/2 연산 필요해
# 시간초과 나더라도 오른쪽 중 최댓값 찾아서 누적하면 돼. 이중 FOR문 예시에 정확히 맞는지가 첫번째 목표.

# 효율적으로 해야해. 아이디어 잘 생각하면 빅오의 N번만으로 마칠 수 있어. 그 아이디어까지 완성해야해.
# 10,7,6.... 백만개 있어. 중복으로 찾는게 좋지 않아. 6일날까지 최대가격 이랑 7 비교해서 큰 값이 최대가격
# 마찬가지로 10이랑 7이랑 비교해서 최대가격 찾음.

# 10 7 6 까지 있다고 가정 최대값은 6 인덱스 N-1...
# 오른쪽 부터 살까 말까 결정하는 거 , 최댓값 비교하는거 한번 이런식으로 하면 BIG o N만큼
# 오른쪽 부터 최댓값구하고 이익 구해나가는게 핵심 아이디어

# ans = 0
# i_max_v = price[N-1] # i+1 -> N-1날 까지 최대 가격
# for i:N-2 -> 0
#      (if i_max(v) > price[i]:
#          ans += imax_v - pirce[i]) 이 연산을 간단하게 하려면 아래쪽이다.
#         ans += imax_v - price[i](이익이 남는 경우 0보다 클것)(0이랑 비교해서 0보다크면 왼쪽값 택하고, 아니면 0을 선택)
#         anx += max(imax_v - priec[i], 0)
#         imax_v = max(price[i], imax_v)



